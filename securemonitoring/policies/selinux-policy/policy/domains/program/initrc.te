#DESC Initrc - System initialization scripts
#
# Authors:  Stephen Smalley <sds@epoch.ncsc.mil> and Timothy Fraser  
#

#################################
#
# Rules for the initrc_t domain.
#
# initrc_t is the domain of the init rc scripts.
# initrc_exec_t is the type of the init program.
#
ifdef(`sendmail.te', `
# do not use privmail for sendmail as it creates a type transition conflict
type initrc_t, domain, privlog, privowner;
', `
type initrc_t, domain, privlog, privowner, privmail;
')
role system_r types initrc_t;
uses_shlib(initrc_t);
type initrc_exec_t, file_type, sysadmfile, exec_type;

# read files in /etc/init.d
allow initrc_t etc_t:lnk_file r_file_perms;

# read localization information
allow initrc_t locale_t:dir r_dir_perms;
allow initrc_t locale_t:{file lnk_file} r_file_perms;

# Read system information files in /proc.
allow initrc_t proc_t:dir r_dir_perms;
allow initrc_t proc_t:{ file lnk_file } r_file_perms;

# Allow IPC with self
allow initrc_t self:unix_dgram_socket create_socket_perms;
allow initrc_t self:unix_stream_socket create_socket_perms;
allow initrc_t self:fifo_file rw_file_perms;

# Read the root directory of a usbdevfs filesystem, and
# the devices and drivers files.  Permit stating of the
# device nodes, but nothing else.
allow initrc_t usbdevfs_t:dir r_dir_perms;
allow initrc_t usbdevfs_t:{ file lnk_file } r_file_perms;
allow initrc_t usbdevfs_device_t:file getattr;

# allow initrc to fork and renice itself
allow initrc_t self:process { fork sigchld setsched };

# Can create ptys for open_init_pty
can_create_pty(initrc)

type initrc_tmp_t, file_type, sysadmfile, tmpfile;
file_type_auto_trans(initrc_t, tmp_t, initrc_tmp_t)

type initrc_var_run_t, file_type, sysadmfile, pidfile;
file_type_auto_trans(initrc_t, var_run_t, initrc_var_run_t)
allow initrc_t var_run_t:{ file sock_file lnk_file } unlink;

allow initrc_t framebuf_device_t:chr_file r_file_perms;

# Use capabilities.
allow initrc_t initrc_t:capability ~sys_module;

# Use system operations.
allow initrc_t kernel_t:system *;

# Audit grantings of the avc_toggle permission to initrc_t.
# The initrc_t domain is granted this permission for 
# people who want to use a development kernel and toggle
# into enforcing mode from an /etc/rc.d script.
# Due to its sensitivity, we always audit it.
auditallow initrc_t kernel_t:system avc_toggle;

# Set values in /proc/sys.
can_sysctl(initrc_t)

# Run helper programs in the initrc_t domain.
allow initrc_t {bin_t sbin_t }:dir r_dir_perms;
allow initrc_t {bin_t sbin_t }:lnk_file read;
can_exec(initrc_t, etc_t)
can_exec(initrc_t, lib_t)
can_exec(initrc_t, bin_t)
can_exec(initrc_t, sbin_t)
can_exec(initrc_t, exec_type)


# Read conf.modules.
allow initrc_t modules_conf_t:file r_file_perms;

# Run other rc scripts in the initrc_t domain.
can_exec(initrc_t, initrc_exec_t)

# Run init (telinit) in the initrc_t domain.
can_exec(initrc_t, init_exec_t)

# Communicate with the init process.
allow initrc_t initctl_t:fifo_file rw_file_perms;

# Send messages to portmap and ypbind.
ifdef(`portmap.te', `can_udp_send(initrc_t, portmap_t)')
ifdef(`ypbind.te', `can_udp_send(initrc_t, ypbind_t)')

# Search persistent label mappings.
allow initrc_t file_labels_t:dir r_dir_perms;
allow initrc_t file_labels_t:file stat_file_perms;

# Read /proc/PID directories for all domains.
allow initrc_t domain:notdevfile_class_set r_file_perms;
allow initrc_t domain:dir r_dir_perms;

# Mount and unmount file systems.
allow initrc_t fs_type:filesystem mount_fs_perms;
allow initrc_t file_t:dir { read search getattr mounton };

# Create runtime files in /etc, e.g. /etc/mtab, /etc/HOSTNAME.
file_type_auto_trans(initrc_t, etc_t, etc_runtime_t, file)

# Update /etc/ld.so.cache.
allow initrc_t ld_so_cache_t:file rw_file_perms;

ifdef(`sendmail.te', `
# Update /etc/mail.
allow initrc_t etc_mail_t:file { setattr rw_file_perms };
')

ifdef(`xfs.te',
`# Unlink the xfs socket.
allow initrc_t xfs_tmp_t:dir rw_dir_perms;
allow initrc_t xfs_tmp_t:dir rmdir;
allow initrc_t xfs_tmp_t:sock_file { read getattr unlink };')

# Update /var/log/wtmp and /var/log/dmesg.
allow initrc_t wtmp_t:file { setattr rw_file_perms };
allow initrc_t var_log_t:file { setattr rw_file_perms };
allow initrc_t lastlog_t:file { setattr rw_file_perms };

# remove old locks
allow initrc_t lockfile:dir rw_dir_perms;
allow initrc_t lockfile:file { getattr unlink };

# Access /var/lib/random-seed.
allow initrc_t var_lib_t:file rw_file_perms;
allow initrc_t var_lib_t:file unlink;

# Create lock file.
allow initrc_t var_lock_t:dir create_dir_perms;
allow initrc_t var_lock_t:file create_file_perms;

# Set the clock.
allow initrc_t clock_device_t:devfile_class_set rw_file_perms;

# Kill all processes.
allow initrc_t domain:process signal_perms;

# Read and unlink /var/run/*.pid files.
allow initrc_t pidfile:file { getattr read unlink };

# Write to /dev/urandom.
allow initrc_t random_device_t:chr_file rw_file_perms;

# Access /dev/psaux (for kudzu).
allow initrc_t psaux_t:chr_file rw_file_perms;

# Set device ownerships/modes.
allow initrc_t framebuf_device_t:lnk_file read;
allow initrc_t framebuf_device_t:devfile_class_set setattr;
allow initrc_t misc_device_t:devfile_class_set setattr;
allow initrc_t device_t:devfile_class_set setattr;
allow initrc_t fixed_disk_device_t:devfile_class_set setattr;
allow initrc_t removable_device_t:devfile_class_set setattr;

# Stat any file.
allow initrc_t file_type:file_class_set getattr;
allow initrc_t file_type:dir { search getattr };

# Read and write console and ttys.
allow initrc_t devtty_t:chr_file rw_file_perms;
allow initrc_t console_device_t:chr_file rw_file_perms;
allow initrc_t tty_device_t:chr_file rw_file_perms;
allow initrc_t ttyfile:chr_file rw_file_perms;
allow initrc_t ptyfile:chr_file rw_file_perms;

# Reset tty labels.
allow initrc_t ttyfile:chr_file relabelfrom;
allow initrc_t tty_device_t:chr_file relabelto;

# Create and read /boot/kernel.h.
# Redhat systems typically create this file at boot time.
allow initrc_t boot_t:lnk_file r_file_perms;
file_type_auto_trans(initrc_t, boot_t, boot_runtime_t)

# Delete and re-create /boot/System.map.
allow initrc_t boot_t:dir { read getattr write remove_name add_name };
allow initrc_t boot_t:lnk_file { read unlink create };
allow initrc_t system_map_t:{ file lnk_file } r_file_perms;

# Unlink /halt.
allow initrc_t root_t:dir { search write remove_name };
allow initrc_t root_t:file { unlink write };

ifdef(`gpm.te', `allow initrc_t gpmctl_t:sock_file setattr;')

allow initrc_t var_spool_t:file rw_file_perms;

ifdef(`pump.te', `allow initrc_t pump_var_run_t:sock_file unlink;')

#
# quota control
#
allow initrc_t fs_type:filesystem { quotamod quotaget };

# Access the mouse (for kudzu).
allow initrc_t mouse_device_t:chr_file rw_file_perms;

# Allow access to the sysadm TTYs. Note that this will give access to the 
# TTYs to any process in the initrc_t domain. Therefore, daemons and such
# started from init should be placed in their own domain.
allow initrc_t admin_tty_type:chr_file rw_file_perms;

# Access sound device and files.
allow initrc_t sound_device_t:chr_file { setattr ioctl read write };
ifdef(`sound.te', `allow initrc_t sound_file_t:file { setattr write };')

ifdef(`rpm.te',
`# Access /var/lib/rpm.
allow initrc_t var_lib_rpm_t:dir rw_dir_perms;
allow initrc_t var_lib_rpm_t:file create_file_perms;')

# Update /var/log/ksyms.*.
file_type_auto_trans(initrc_t, var_log_t, var_log_ksyms_t)

ifdef(`apmd.te',
`# Access /dev/apm_bios.
allow initrc_t apm_bios_t:chr_file { setattr getattr };')

# Access /dev/fd0 (for kudzu). Need a separate domain for kudzu?
allow initrc_t removable_device_t:blk_file rw_file_perms;

ifdef(`lpd.te',
`# Read printconf files.
allow initrc_t printconf_t:dir r_dir_perms;
allow initrc_t printconf_t:file r_file_perms;')

# Create and delete /.autofsck
allow initrc_t root_t:dir { search write add_name };
allow initrc_t root_t:file { create setattr unlink getattr };
allow initrc_t file_t:file { unlink getattr };

# Read user home directories.
allow initrc_t { home_root_t home_type }:dir r_dir_perms;
allow initrc_t home_type:file r_file_perms;

# for system start scripts
allow initrc_t pidfile:dir rw_dir_perms;
allow initrc_t pidfile:sock_file unlink;
allow initrc_t tmpfile:sock_file unlink;
rw_dir_create_file(initrc_t, var_lib_t)

# allow start scripts to clean /tmp
allow initrc_t tmpfile:dir { rw_dir_perms rmdir };
allow initrc_t tmpfile:notdevfile_class_set { getattr unlink };

#################################
#
# Rules for the run_init_t domain.
#
run_program(sysadm_t, sysadm_r, init, initrc_exec_t, initrc_t)

# added for now 
allow initrc_t any_socket_t:udp_socket { sendto };
allow initrc_t netif_eth0_t:netif { udp_recv };
allow initrc_t node_t:node { udp_recv };
allow initrc_t port_t:udp_socket { name_bind };
allow initrc_t var_spool_t:dir { read };
allow initrc_t var_yp_t:file { read setattr write };
allow initrc_t device_t:dir { add_name write };
allow initrc_t device_t:lnk_file { read };
allow initrc_t device_t:sock_file { create setattr };
allow initrc_t initrc_t:process { setcap setpgid };
allow initrc_t initrc_t:rawip_socket { create getopt };
allow initrc_t initrc_t:tcp_socket { accept acceptfrom bind connect connectto create getattr listen read recvfrom setopt write };
allow initrc_t initrc_t:unix_stream_socket { listen };
allow initrc_t lib_t:lnk_file { read };
allow initrc_t mount_t:udp_socket { recvfrom };
allow initrc_t netif_eth0_t:netif { tcp_send udp_send };
allow initrc_t netif_lo_t:netif { tcp_recv tcp_send udp_recv udp_send };
allow initrc_t netmsg_eth0_t:tcp_socket { connectto recvfrom };
allow initrc_t netmsg_eth0_t:udp_socket { recvfrom };
allow initrc_t node_lo_t:node { tcp_recv tcp_send udp_recv udp_send };
allow initrc_t node_t:node { tcp_send udp_send };
allow initrc_t var_t:dir { read };
allow initrc_t var_t:file { read };
allow initrc_t var_t:lnk_file { read };
allow initrc_t var_yp_t:dir { add_name read write };
allow initrc_t var_yp_t:file { create };
allow initrc_t etc_t:file { unlink };
allow initrc_t initrc_t:udp_socket { bind create ioctl recvfrom setopt };
allow initrc_t etc_t:file { setattr write };
allow initrc_t initrc_t:udp_socket { connect getattr read write };
allow initrc_t modules_dep_t:file { read };
allow initrc_t port_t:tcp_socket { name_bind };
allow initrc_t resolv_conf_t:file { read };
allow initrc_t usr_t:file { read };
allow initrc_t var_lib_nfs_t:dir { read write };
allow initrc_t var_lib_nfs_t:file { read write };

allow initrc_t apm_bios_t:chr_file { setattr };
allow initrc_t device_t:chr_file { write };
allow initrc_t device_t:dir { read };
allow initrc_t v4l_device_t:chr_file { setattr };
allow initrc_t var_run_dhcpc_t:file { write };
allow initrc_t var_spool_t:file { execute };

# added for buffer overflow exploit test
allow initrc_t newrole_t:fd { use };
allow initrc_t security_t:security { sid_to_context };
allow initrc_t usr_t:dir { add_name remove_name write };
allow initrc_t usr_t:file { create execute execute_no_trans unlink write setattr };

# added to run society using acme
allow initrc_t acme_t:udp_socket { recvfrom };
allow initrc_t var_lib_nfs_t:dir { add_name };
allow initrc_t var_lib_nfs_t:file { create };
allow initrc_t tmp_t:file { setattr write };
allow initrc_t tmp_t:sock_file { write };
