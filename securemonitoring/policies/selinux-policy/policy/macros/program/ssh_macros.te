#
# Macros for ssh domains.
#

#
# Author:  Stephen Smalley <sds@epoch.ncsc.mil>
#

# 
# ssh_domain(domain_prefix)
#
# Define a derived domain for the ssh program when executed
# by a user domain.
#
# The type declaration for the executable type for this program is
# provided separately in domains/program/ssh.te. 
#
undefine(`ssh_domain')
ifdef(`ssh.te',
`
define(`ssh_domain',`
# Derived domain based on the calling user domain and the program.
type $1_ssh_t, domain, privlog;

# Transition from the user domain to the derived domain.
domain_auto_trans($1_t, ssh_exec_t, $1_ssh_t)

# The user role is authorized for this domain.
role $1_r types $1_ssh_t;

# Grant permissions within the domain.
general_domain_access($1_ssh_t)

# Use descriptors created by sshd
allow $1_ssh_t privfd:fd use;

uses_shlib($1_ssh_t)

# read localization information
allow $1_ssh_t locale_t:dir r_dir_perms;
allow $1_ssh_t locale_t:{file lnk_file} r_file_perms;

# Get attributes of file systems.
allow $1_ssh_t fs_type:filesystem getattr;

base_file_read_access($1_ssh_t)

# Read the devpts root directory.
allow $1_ssh_t devpts_t:dir r_dir_perms;

# Read /var.
allow $1_ssh_t var_t:dir r_dir_perms;
allow $1_ssh_t var_t:notdevfile_class_set r_file_perms;

# Read /var/run, /var/log.
allow $1_ssh_t var_run_t:dir r_dir_perms;
allow $1_ssh_t var_run_t:{ file lnk_file } r_file_perms;
allow $1_ssh_t var_log_t:dir r_dir_perms;
allow $1_ssh_t var_log_t:{ file lnk_file } r_file_perms;

# Read /etc.
allow $1_ssh_t etc_t:dir r_dir_perms;
allow $1_ssh_t etc_t:notdevfile_class_set r_file_perms;
allow $1_ssh_t etc_runtime_t:{ file lnk_file } r_file_perms;
allow $1_ssh_t resolv_conf_t:{ file lnk_file } r_file_perms;

# Read the linker, shared library, and executable types.
allow $1_ssh_t ld_so_t:{ file lnk_file } r_file_perms;
allow $1_ssh_t shlib_t:{ file lnk_file } r_file_perms;
allow $1_ssh_t exec_type:{ file lnk_file } r_file_perms;

# Read /dev directories and any symbolic links.
allow $1_ssh_t device_t:dir r_dir_perms;
allow $1_ssh_t device_t:lnk_file r_file_perms;

# Read /dev/random.
allow $1_ssh_t random_device_t:chr_file r_file_perms;

# Read and write /dev/tty and /dev/null.
allow $1_ssh_t devtty_t:chr_file rw_file_perms;
allow $1_ssh_t { null_device_t zero_device_t }:chr_file rw_file_perms;

# Grant permissions needed to create TCP and UDP sockets and
# to access the network.
can_network($1_ssh_t)

# for sshing to a ssh tunnel
can_tcp_connect($1_ssh_t, $1_ssh_t)

# Use capabilities.
allow $1_ssh_t self:capability { setuid setgid dac_override dac_read_search };

# Run helpers.
can_exec_any($1_ssh_t)

# Read the ssh key file.
allow $1_ssh_t sshd_key_t:file r_file_perms;

# Access the ssh temporary files.
file_type_auto_trans($1_ssh_t, tmp_t, sshd_tmp_t)
allow $1_ssh_t $1_tmp_t:dir r_dir_perms;

# for rsync
allow $1_ssh_t $1_t:unix_stream_socket rw_socket_perms;

# Access the users .ssh directory.
type $1_home_ssh_t, file_type, sysadmfile;
file_type_auto_trans({ sysadm_ssh_t $1_ssh_t }, $1_home_dir_t, $1_home_ssh_t)
allow { sysadm_ssh_t $1_ssh_t } $1_home_ssh_t:lnk_file { getattr read };
dontaudit $1_ssh_t $1_home_t:dir search;
r_dir_file(sshd_t, $1_home_ssh_t)
rw_dir_create_file($1_t, $1_home_ssh_t)

# Inherit and use descriptors from gnome-pty-helper.
ifdef(`gnome-pty-helper.te', `allow $1_ssh_t $1_gph_t:fd use;')

# Connect to sshd.
can_tcp_connect($1_ssh_t, sshd_t)

# Write to the user domain tty.
allow $1_ssh_t $1_tty_device_t:chr_file rw_file_perms;
allow $1_ssh_t $1_devpts_t:chr_file rw_file_perms;

# Allow the user shell to signal the ssh program.
allow $1_t $1_ssh_t:process signal;
# allow ps to show ssh
allow $1_t $1_ssh_t:dir { search getattr read };
allow $1_t $1_ssh_t:{ file lnk_file } { read getattr };

# Allow the ssh program to communicate with ssh-agent.
allow $1_ssh_t $1_tmp_t:sock_file write;
allow $1_ssh_t $1_t:unix_stream_socket connectto;
allow $1_ssh_t sshd_t:unix_stream_socket connectto;

ifdef(`xserver.te', `
# Communicate with the X server.
can_unix_connect($1_ssh_t, $1_xserver_t)
allow $1_ssh_t $1_xserver_tmp_t:sock_file rw_file_perms;
allow $1_ssh_t { initrc_xserver_tmp_t $1_xserver_tmp_t }:dir search;
')

ifdef(`xdm.te', `
# should be able to remove these two later
allow $1_ssh_t xdm_xserver_tmp_t:sock_file { read write };
allow $1_ssh_t xdm_xserver_tmp_t:dir search;
allow $1_ssh_t xdm_xserver_t:unix_stream_socket connectto;
allow $1_ssh_t xdm_xserver_t:shm { read unix_read getattr associate };
allow $1_ssh_t xdm_xserver_t:fd use;
allow $1_ssh_t xdm_xserver_tmpfs_t:file read;
')

')dnl  end of ifdef ssh.te


', `

define(`ssh_domain',`')

')
