#
# Macros for su domains.
#

#
# Authors:  Stephen Smalley <sds@epoch.ncsc.mil> and Timothy Fraser
#

#
# su_domain(domain_prefix)
#
# Define a derived domain for the su program when executed
# by a user domain.
#
# The type declaration for the executable type for this program is
# provided separately in domains/program/su.te. 
#
undefine(`su_mini_domain')
undefine(`su_domain')
ifdef(`su.te', `
define(`su_mini_domain', `
# Derived domain based on the calling user domain and the program.
type $1_su_t, domain, privlog, auth;

# Transition from the user domain to this domain.
domain_auto_trans($1_t, su_exec_t, $1_su_t)

# This domain is granted permissions common to most domains.
every_domain($1_su_t)

# Use capabilities.
allow $1_su_t self:capability { setuid setgid net_bind_service chown dac_override sys_nice sys_resource };

# Revert to the user domain when a shell is executed.
domain_auto_trans($1_su_t, shell_exec_t, $1_t)

allow $1_su_t privfd:fd use;

# Write to utmp.
allow $1_su_t initrc_var_run_t:file rw_file_perms;

')dnl end su_mini_domain

define(`su_domain', `
su_mini_domain($1)
ifdef(`chkpwd.te', `
# Run chkpwd.
can_exec($1_su_t, chkpwd_exec_t)
')

# Inherit and use descriptors from gnome-pty-helper.
ifdef(`gnome-pty-helper.te', `
allow { $1_su_t $1_t } $1_gph_t:fd use;
')

# The user role is authorized for this domain.
role $1_r types $1_su_t;

# Write to the user domain tty.
allow $1_su_t $1_tty_device_t:chr_file rw_file_perms;
allow $1_su_t $1_devpts_t:chr_file rw_file_perms;

allow $1_su_t $1_home_dir_t:dir search;

# Modify .Xauthority file (via xauth program).
ifdef(`xauth.te', `
domain_auto_trans($1_su_t, xauth_exec_t, $1_xauth_t)
')

# Access sshd cookie files.
allow $1_su_t sshd_tmp_t:dir rw_dir_perms;
allow $1_su_t sshd_tmp_t:file rw_file_perms;
file_type_auto_trans($1_su_t, sshd_tmp_t, $1_tmp_t)

# stop su complaining if you run it from a directory with restrictive perms
dontaudit $1_su_t file_type:dir search;
')dnl end su_domain

', `

define(`su_domain',`')

')
